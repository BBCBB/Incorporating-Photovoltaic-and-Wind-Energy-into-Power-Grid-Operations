clear all
close all
clc

Loads = [900 1000 950 1050 1100 1205 ...
        1800 1900 2000 2400 2500 2600 ...
        2550 2700 2800 2850 2710 2595 ...
        2310 1830 1530 1410 1180 1105];
fuel_cost = [1.1; 1; 1];
cost_coeff = [749.55 6.95 9.68*10^-4 1.27*10^-7; 1285 7.051 7.375*10^-4 6.453*10-8; 1531 6.531 1.04*10^-3 9.98*10^-8;];
             
max_gen = [800 1200 1100];
min_gen =[50 100 150];

PV=0.25;
wind=0.25;
shutcost=500;
startcost=1000;
avgcost=zeros(1,3);
for i=1:3
   avgcost(i)=(cost_coeff(i,1)+cost_coeff(i,2)*max_gen(i)+cost_coeff(i,3)*max_gen(i)^2+cost_coeff(i,3)*max_gen(i)^3)/max_gen(i);
end
sub_loadfilenames
objvalue=zeros(24,7);
shst=zeros(24,7);
num_generators = size(cost_coeff, 1);
num_hours =24;
committed_gen = zeros(num_generators, num_hours,7);
for j = 1:7
    loads=zeros(1,24);
    if j<=6
        Eprofile = readtable(file_names1{j});
        selectedColumns = {'Solar','Wind'};
        EP= Eprofile(:, selectedColumns);
        EP= table2array(EP);
        solwind=sum(EP,2);
        solwind=solwind*0.4;
    else
        solwind=zeros(24,1);
    end
    for d=1:24
        loads(d)=Loads(d)-min(solwind(d),0.25*max(Loads));
    end
    % Sort generators based on their marginal costs
    [~, sorted_idx] = sort(avgcost);
    
    % Iterate over each hour
    for hour = 1:24
        if hour>1
            prevuclist=committed_gen(:,hour-1,j)>0;
        else
            prevuclist=zeros(3,1);
        end
        remaining_load = loads(hour);
        generation = zeros(num_generators, 1);
        
        % Iterate over sorted generators
        for idx = 1:num_generators
            % Get the generator index from sorted list
            generator_idx = sorted_idx(idx);
            
            % Calculate available generation capacity for this generator
            available_capacity = max(min_gen(generator_idx), min(max_gen(generator_idx), remaining_load));
            
            % Update generation schedule
            generation(generator_idx) = available_capacity;
            
            % Update remaining load
            remaining_load = remaining_load - available_capacity;
            
            % Check if remaining load is zero
            if remaining_load <= 0
                break;
            end
        end
        uclist=generation>0;
        [generation1,obj1]=f_opt(min_gen, max_gen, loads(hour), cost_coeff, fuel_cost,uclist);
        st=sum(max(uclist-prevuclist,0)) *startcost;
        sht=sum(max(prevuclist-uclist,0))*shutcost;
        obj1=obj1+st+sht;
        
        if hour>1 && sum(max_gen.*prevuclist')>=loads(hour)
            [generation0,obj0]=f_opt(min_gen, max_gen, loads(hour), cost_coeff, fuel_cost,prevuclist);
            
        else
            obj0=9e10;
        end
        
            
        if obj1<=obj0
            if hour > 1 && hour < 24 && (obj0 - obj1) < 1000 && sum(uclist) < sum(prevuclist) && all(max_gen .* uclist' < loads(hour + 1))
  
                generation=generation0;
                objvalue(hour,j)=obj0;
                shst(hour,j)=0;
            else
                generation=generation1;
                objvalue(hour,j)=obj1;
                shst(hour,j)=st+sht;
            end  
        else
            generation=generation0;
            objvalue(hour,j)=obj0;
            shst(hour,j)=0;
        end
        % Store committed generation for this hour
        committed_gen(:, hour,j) = generation;

    end
   
end
format long


time=1:1:24;   
scenario_names = {'Sunny Windy Day', 'Sunny Windy Night', 'Sunny Windy Continuous', ...
                  'Cloudy Windy Continuous', 'Cloudy Windy Night', 'Cloucy Windy Day','No solar/Wind'};
for jj = 1:7
    figure(jj)

    bar(time, shst(:, jj))
    xlabel('Hour of the day')
    ylabel('Cost of startup/shutdown')
    title(['Start+Shutdown Cost over the day for 3 Generators, ', scenario_names{jj}])
end




figure(8)
for i = 1:7
    plot(time, sum(committed_gen(:,:,i), 1))
    hold on
end
legend('Sunny-Windy Day', 'Sunny Windy Night', 'Sunny Windy Continuous', 'Cloudy Windy Continuous', 'Cloudy Windy Night', 'Cloucy Windy Day','No solar/Wind')
xlabel('Hour of the day'), ylabel('Total Optimal Generation (MW)')
sgtitle('Total output generated by 3 Gens over the day, for each scenario')


for i = 1:7
    figure(8+i)
    bar(time, cumsum(committed_gen(:,:,i)>0))
    legend('Gen 1', 'Gen 2', 'Gen 3')
    xlabel('Hour of the day'), ylabel('Generator')
    sgtitle(['Commitment schedule of scenario' num2str(i)])
end


figure(16);
bar(sum(objvalue,1))
xticklabels({'Sunny-Windy Day', 'Sunny Windy Night', 'Sunny Windy Continuous', 'Cloudy Windy Continuous', 'Cloudy Windy Night', 'Cloudy Windy Day','No solar/Wind'})
xlabel('Scenario'), ylabel('Total Cost ($)')
title('Total cost of generation in each scenario')

figHandles = findall(0, 'Type', 'figure');
for i = 1:length(figHandles)
    % Set the current figure
    figure(figHandles(i));
    
    % Generate a filename (e.g., 'figure1.png')
    filename = sprintf('figure%d.png', i);
    
    % Save the figure to the specified folder
    saveas(figHandles(i), fullfile('/MATLAB Drive/ECE753HW7', filename));
end
